syntax = "proto3";
package guoi.cloud.org8n;


option java_multiple_files = true;
option java_package = "com.github.conanchen.guoi.cloud.org8n";
option java_outer_classname = "Org8nServiceProto";

import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";

service Org8nApi {
    // Returns a list of all shelves in the bookstore.
    rpc ListShelves (google.protobuf.Empty) returns (ListShelvesResponse) {
        //        option (google.api.http) = {
        //      get: "/shelves"
        //    };
    }
    // Creates a new shelf in the bookstore.
    rpc CreateShelf (CreateShelfRequest) returns (Shelf) {
        //        option (google.api.http) = {
        //      post: "/shelf"
        //      body: "shelf"
        //    };
    }
    // Creates multiple shelves with one streaming call
    rpc BulkCreateShelf (stream CreateShelfRequest) returns (stream Shelf) {
        //        option (google.api.http) = {
        //      post: "/bulk/shelves"
        //      body: "shelf"
        //    };
    }
    // Returns a specific bookstore shelf.
    rpc GetShelf (GetShelfRequest) returns (Shelf) {
        //        option (google.api.http) = {
        //      get: "/shelves/{shelf}"
        //    };
    }
    // Deletes a shelf, including all books that are stored on the shelf.
    rpc DeleteShelf (DeleteShelfRequest) returns (google.protobuf.Empty) {
    }
    // Lists books in a shelf.
    rpc ListBooks (ListBooksRequest) returns (ListBooksResponse) {
        //        // List method maps to HTTP GET.
        //        option (google.api.http) = {
        //    // The `parent` captures the parent resource name, such as "shelves/shelf1".
        //    get: "/v1/{parent=shelves/*}/books"
        //  };
    }

    // Gets a book.
    rpc GetBook (GetBookRequest) returns (Book) {
        //        // Get maps to HTTP GET. Resource name is mapped to the URL. No body.
        //        option (google.api.http) = {
        //    // Note the URL template variable which captures the multi-segment resource
        //    // name of the requested book, such as "shelves/shelf1/books/book2"
        //    get: "/v1/{name=shelves/*/books/*}"
        //  };
    }

    // Creates a book in a shelf.
    rpc CreateBook (CreateBookRequest) returns (Book) {
        //        // Create maps to HTTP POST. URL path as the collection name.
        //        // HTTP request body contains the resource.
        //        option (google.api.http) = {
        //    // The `parent` captures the parent resource name, such as "shelves/1".
        //    post: "/v1/{parent=shelves/*}/books"
        //    body: "book"
        //  };
    }

    // Updates a book.
    rpc UpdateBook (UpdateBookRequest) returns (Book) {
        //        // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
        //        // Resource is contained in the HTTP request body.
        //        option (google.api.http) = {
        //    // Note the URL template variable which captures the resource name of the
        //    // book to update.
        //    patch: "/v1/{book.name=shelves/*/books/*}"
        //    body: "book"
        //  };
    }

    // Deletes a book.
    rpc DeleteBook (DeleteBookRequest) returns (google.protobuf.Empty) {
        //        // Delete maps to HTTP DELETE. Resource name maps to the URL path.
        //        // There is no request body.
        //        option (google.api.http) = {
        //    // Note the URL template variable capturing the multi-segment name of the
        //    // book resource to be deleted, such as "shelves/shelf1/books/book2"
        //    delete: "/v1/{name=shelves/*/books/*}"
        //  };
    }
    rpc BookstoreOptions (GetShelfRequest) returns (google.protobuf.Empty) {
        //        option (google.api.http) = {
        //      custom {
        //        kind: "OPTIONS"
        //        path: "/shelves/{shelf}"
        //      }
        //    };
    }
    // Returns a specific author.
    rpc GetAuthor (GetAuthorRequest) returns (Author) {
        //        option (google.api.http) = {
        //      get: "/authors/{author}"
        //    };
    }
}

//    To retrieve the next page of results, client shall pass the value of response's
//    next_page_token in the subsequent List method call (in the request message's page_token field):
//    https://cloud.google.com/apis/design/design_patterns
message ListBooksRequest {
    // The parent resource name, for example, "shelves/shelf1".
    string parent = 1;

    // The maximum number of items to return.
    int32 page_size = 2;

    // The next_page_token value returned from a previous List request, if any.
    string page_token = 3;
}

message ListBooksResponse {
    // The field name should match the noun "books" in the method name.  There
    // will be a maximum number of items returned based on the page_size field
    // in the request.
    repeated Book books = 1;

    // Token to retrieve the next page of results, or empty if there are no
    // more results in the list.
    string next_page_token = 2;
}
// A shelf resource.
message Shelf {
    // A unique shelf id.
    int64 id = 1;
    // A theme of the shelf (fiction, poetry, etc).
    string theme = 2;
}

message Book {
    // Resource name of the book. It must have the format of "shelves/*/books/*".
    // For example: "shelves/shelf1/books/book2".
    string name = 1;

    // ... other properties
}
// An author resource.
message Author {
    // A unique author id.
    int64 id = 1;
    enum Gender {
        UNKNOWN = 0;
        MALE = 1;
        FEMALE = 2;
    };
    Gender gender = 2;
    string first_name = 3;
    string last_name = 4;
}

// Response to ListShelves call.
message ListShelvesResponse {
    // *Output-only* If set, returns a [google.rpc.Status][google.rpc.Status] message that
    // specifies the error for the operation.
    google.rpc.Status error = 999;

    // Shelves in the bookstore.
    repeated Shelf shelves = 1;
}

// Request message for CreateShelf method.
message CreateShelfRequest {
    // The shelf resource to create.
    Shelf shelf = 1;
}

// Request message for GetShelf method.
message GetShelfRequest {
    // The ID of the shelf resource to retrieve.
    int64 shelf = 1;
}

// Request message for DeleteShelf method.
message DeleteShelfRequest {
    // The ID of the shelf to delete.
    int64 shelf = 1;
}
message GetBookRequest {
    // The field will contain name of the resource requested, for example:
    // "shelves/shelf1/books/book2"
    string name = 1;
}

message CreateBookRequest {
    // The parent resource name where the book to be created.
    string parent = 1;

    // The book id to use for this book.
    string book_id = 3;

    // The book resource to create.
    // The field name should match the Noun in the method name.
    Book book = 2;
}

message UpdateBookRequest {
    // The book resource which replaces the resource on the server.
    Book book = 1;

    // The update mask applies to the resource. For the `FieldMask` definition,
    // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
    google.protobuf.FieldMask update_mask = 2;
}


message DeleteBookRequest {
    // The resource name of the book to be deleted, for example:
    // "shelves/shelf1/books/book2"
    string name = 1;
}
// Request message for GetAuthor method.
message GetAuthorRequest {
    // The ID of the author resource to retrieve.
    int64 author = 1;
}